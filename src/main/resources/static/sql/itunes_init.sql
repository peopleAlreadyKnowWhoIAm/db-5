-- MySQL Script generated by MySQL Workbench and changed by me

-- Schema itunes
DROP SCHEMA IF EXISTS itunes;

CREATE SCHEMA itunes;

USE itunes;

-- Table label
CREATE TABLE label (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45) NOT NULL
);

-- Table album
CREATE TABLE album (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45) NOT NULL,
  year_of_publishing INT NULL,
  label_id INT NULL
);

-- Table genre
CREATE TABLE genre (
  id INT NOT NULL auto_increment PRIMARY KEY,
  name VARCHAR(45) NOT NULL
);

-- Table song
CREATE TABLE song (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45) NOT NULL,
  length INT NOT NULL,
  album_id INT NULL,
  genre_id INT NULL
);

-- Table author
CREATE TABLE author (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45) NOT NULL
);

-- Table related_genres
CREATE TABLE related_genres (
  genre_id INT NOT NULL,
  related_genre_id INT NOT NULL,
  PRIMARY KEY (genre_id, related_genre_id)
);

-- Table user
CREATE TABLE user (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(45) NOT NULL,
  email VARCHAR(45) NOT NULL UNIQUE
);

-- Table user_playlist_info
CREATE TABLE user_playlist_info (
  id INT NOT NULL PRIMARY KEY auto_increment,
  user_id INT NOT NULL,
  name VARCHAR(45) NOT NULL
);

-- Table songs_saved_by_user
CREATE TABLE songs_saved_by_user (
  song_id INT NOT NULL,
  user_id INT NOT NULL,
  PRIMARY KEY (song_id, user_id)
);

-- Table albums_saved_by_user
CREATE TABLE albums_saved_by_user (
  album_id INT NOT NULL,
  user_id INT NOT NULL,
  PRIMARY KEY (album_id, user_id)
);

-- Table user_prefer_genre
CREATE TABLE user_prefer_genre (
  user_id INT NOT NULL,
  genre_id INT NOT NULL,
  PRIMARY KEY (user_id, genre_id)
);

-- Table playlist_has_song
CREATE TABLE playlist_has_song (
  user_playlist_info_id INT NOT NULL,
  song_id INT NOT NULL,
  PRIMARY KEY (user_playlist_info_id, song_id)
);

-- Table user_credential
CREATE TABLE user_credential (
  user_id INT NOT NULL PRIMARY KEY,
  PASSWORD VARCHAR(45) NOT NULL
);

-- Table song_has_author
CREATE TABLE song_has_author (
  song_id INT NOT NULL,
  author_id INT NOT NULL,
  PRIMARY KEY (song_id, author_id)
);

-- Table album_has_author
CREATE TABLE album_has_author (
  album_id INT NOT NULL,
  author_id INT NOT NULL,
  PRIMARY KEY (album_id, author_id)
);


-- ---------------------------------------------------------------
-- Constraints section
-- label
CREATE INDEX inx_label_name ON label(name);

-- album
ALTER TABLE
  album
ADD
  CONSTRAINT fk_album_label_id FOREIGN KEY (label_id) REFERENCES label(id) ON DELETE
SET
  NULL ON UPDATE CASCADE;

CREATE INDEX inx_album_name ON album(name);

-- genre
CREATE INDEX inx_genre_name ON genre(name);

-- related genres
ALTER TABLE
  related_genres 
ADD
  CONSTRAINT fk_related_genres_genre_id FOREIGN KEY (genre_id) REFERENCES genre(id) ON UPDATE CASCADE ON DELETE CASCADE,
ADD
  CONSTRAINT fk_related_genres_genre2_id FOREIGN KEY (related_genre_id) REFERENCES genre(id) ON UPDATE CASCADE ON DELETE CASCADE;
-- song
ALTER TABLE
  song
ADD
  CONSTRAINT fk_song_album_id FOREIGN KEY (album_id) REFERENCES album(id) ON UPDATE CASCADE ON DELETE
SET
  NULL,
ADD
  CONSTRAINT fk_song_genre_id FOREIGN KEY (genre_id) REFERENCES genre(id) ON UPDATE CASCADE ON DELETE
SET
  NULL;

CREATE INDEX inx_song_name ON song(name);

-- author
CREATE INDEX inx_author_name ON author(name);

-- user
CREATE INDEX inx_user_name ON user(name);
CREATE INDEX inx_user_email ON user(email);

-- user_playlist_info
ALTER TABLE
  user_playlist_info
ADD
  CONSTRAINT fk_user_playlist_user_id FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE;

CREATE INDEX inx_user_playlist_info_name ON user_playlist_info(name);

-- songs saved by user
ALTER TABLE
  songs_saved_by_user 
ADD
  CONSTRAINT fk_song_saved_by_user_song_id FOREIGN KEY (song_id) REFERENCES song(id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD
  CONSTRAINT fk_song_saved_by_user_user_id FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- albums_saved_by_user
ALTER TABLE
  albums_saved_by_user 
ADD
  CONSTRAINT fk_album_saved_by_user_album_id FOREIGN KEY (album_id) REFERENCES album(id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD
  CONSTRAINT fk_album_saved_by_user_user_id FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- user_prefer_genre
ALTER TABLE
  user_prefer_genre 
ADD
  CONSTRAINT fk_user_prefer_genre_user_id FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD
  CONSTRAINT fk_user_prefer_genre_genre_id FOREIGN KEY (genre_id) REFERENCES genre(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- playlist_has_song
ALTER TABLE
  playlist_has_song 
ADD
  CONSTRAINT fk_user_playlist_has_song_user_playlist_id FOREIGN KEY (user_playlist_info_id) REFERENCES user_playlist_info(id) ON DELETE CASCADE ON UPDATE CASCADE,
ADD
  CONSTRAINT fk_user_playlist_has_song_song_id FOREIGN KEY (song_id) REFERENCES song(id) ON DELETE CASCADE ON UPDATE CASCADE;


-- user_credential
ALTER TABLE
  user_credential
ADD
  CONSTRAINT fk_user_credential_user_id FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE ON UPDATE CASCADE;

-- song_has_author
ALTER TABLE
  song_has_author
ADD
  CONSTRAINT fk_song_has_author_song_id FOREIGN KEY (song_id) REFERENCES song(id) ON UPDATE CASCADE ON DELETE CASCADE,
ADD
  CONSTRAINT fk_song_has_author_author_id FOREIGN KEY (author_id) REFERENCES author(id) ON UPDATE CASCADE ON DELETE CASCADE;

-- album_has_author
ALTER TABLE
  album_has_author
ADD
  CONSTRAINT fk_album_has_author_song_id FOREIGN KEY (album_id) REFERENCES album(id) ON UPDATE CASCADE ON DELETE CASCADE,
ADD
  CONSTRAINT fk_album_has_author_author_id FOREIGN KEY (author_id) REFERENCES author(id) ON UPDATE CASCADE ON DELETE CASCADE;

